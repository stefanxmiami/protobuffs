syntax = "proto3";

package tutorial;

option java_multiple_files = true; // Enables generating a separate .java file for each generated class (instead of the legacy behaviour of generating a single .java file for the wrapper class, using the wrapper class as an outer class, and nesting all the other classes inside the wrapper class).
option java_package = "com.example.tutorial.protos"; // specifies in what Java package name your generated classes should live. If you don't specify this explicitly, it simply matches the package name given by the package declaration, but these names usually aren't appropriate Java package names (since they usually don't start with a domain name).
option java_outer_classname = "AddressBookProtos"; // defines the class name of the wrapper class which will represent this file. If you don't give a java_outer_classname explicitly, it will be generated by converting the file name to upper camel case. Ex: my_proto.proto -> MyProto

message User { // A message is just an aggregate containing a set of typed fields. Many standard simple data types are available as field types, including: bool, int32, float, double and string.
  string name = 1; // optional: the field may or may not be set. If it isn't set, a default value is used.
  int32 id = 2;
  string email = 3;

}

message AddressBook {
  repeated User people = 1;
}

/*
repeated: the field may be repeated any number of times (including zero). The order of the repeated values will be preserved in the protocol buffer.
Think of repeated fields as dynamically sized arrays.

required: a value for the field must be provided, otherwise the message will be considered "uninitialized".
Trying to build an uninitialized message will throw a RuntimeException. Parsing an uninitialized message will throw an IOException.
Other than this, a required field behaves exactly like an optional field.

Required Is Forever You should be very careful about marking fields as required. If at some point you wish to stop writing or sending a required field,
it will be problematic to change the field to an optional field â€“ old readers will consider messages without this field to be incomplete and may reject
or drop them unintentionally. You should consider writing application-specific custom validation routines for your buffers instead. Within Google,
required fields are strongly disfavored; most messages defined in proto2 syntax use optional and repeated only. (Proto3 does not support required fields at all.)   */