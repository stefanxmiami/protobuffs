/*
 * This file is generated by jOOQ.
 */
package com.example.tutorial.jooq.tables;


import com.example.tutorial.jooq.Keys;
import com.example.tutorial.jooq.Public;
import com.example.tutorial.jooq.tables.records.CarRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Car extends TableImpl<CarRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.Car</code>
     */
    public static final Car CAR = new Car();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CarRecord> getRecordType() {
        return CarRecord.class;
    }

    /**
     * The column <code>public.Car.id</code>.
     */
    public final TableField<CarRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.Car.user_id</code>.
     */
    public final TableField<CarRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.Car.manufacturer</code>.
     */
    public final TableField<CarRecord, String> MANUFACTURER = createField(DSL.name("manufacturer"), SQLDataType.CLOB.nullable(false), this, "");

    private Car(Name alias, Table<CarRecord> aliased) {
        this(alias, aliased, null);
    }

    private Car(Name alias, Table<CarRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.Car</code> table reference
     */
    public Car(String alias) {
        this(DSL.name(alias), CAR);
    }

    /**
     * Create an aliased <code>public.Car</code> table reference
     */
    public Car(Name alias) {
        this(alias, CAR);
    }

    /**
     * Create a <code>public.Car</code> table reference
     */
    public Car() {
        this(DSL.name("Car"), null);
    }

    public <O extends Record> Car(Table<O> child, ForeignKey<O, CarRecord> key) {
        super(child, key, CAR);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<CarRecord> getPrimaryKey() {
        return Keys.CAR_PKEY;
    }

    @Override
    public List<UniqueKey<CarRecord>> getKeys() {
        return Arrays.<UniqueKey<CarRecord>>asList(Keys.CAR_PKEY);
    }

    @Override
    public List<ForeignKey<CarRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CarRecord, ?>>asList(Keys.CAR__CAR_USER_FKEY);
    }

    private transient Users _users;

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.CAR__CAR_USER_FKEY);

        return _users;
    }

    @Override
    public Car as(String alias) {
        return new Car(DSL.name(alias), this);
    }

    @Override
    public Car as(Name alias) {
        return new Car(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Car rename(String name) {
        return new Car(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Car rename(Name name) {
        return new Car(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
